# surprise_event_schema.yaml — kitchen example (simple)
surprise_event_schema:
  context:
    scene: "kitchen"
    agent_state: "calm, observing"
    normal_expectation: "quiet, stable environment"

  trigger:
    description: "unexpected smell of smoke, sound of crackling"
    observed_change: "new sensory input not matching recent memory"
    time_detected: t0

  immediate_response:
    classification: "surprise"
    local_check:
      - "scan visually for source"
      - "listen for direction"
      - "compare with previous scene memory"
    decision_point: "is situation safe to keep observing?"

  branch_logic:
    - if safe:
        mode: "drift"
        action: "update belief: heat source active, continue monitoring"
    - if uncertain:
        mode: "counterflow"
        action: "focus attention on source, prepare minimal adjustment"
    - if unsafe:
        mode: "recast"
        action_sequence:
          - "activate conscious planning"
          - "identify smallest effective fix (turn off stove, open window)"
          - "execute and return to calm observation"

  after_event:
    confirmation: "check that smell/sound reduced"
    log_entry:
      description: "fire resolved with minimal interference"
      duration_active_state: "short"
      return_to_baseline: "agent resumes quiet observation"

  learning_update:
    new_pattern: "smoke smell + crackling → possible fire"
    future_prediction: "anticipate cooking events, watch for same signals earlier"
    note: "conscious action only when direct threat observed"
